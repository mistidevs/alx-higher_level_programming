"""

# Importing the module
>>> add_integer = __import__('0-add_integer').add_integer

# Case with integers only
>>> add_integer(3, 4)
7

# Case with floats
>>> add_integer(3.0, 4.0)
7

# Case with integer and float
>>> add_integer(3.0, 4)
7

# Case where a is not a intgeer or float
>>> add_integer("woza", 4)
    Traceback (most recent call last):
    TypeError: a must be an integer

# Case where b is not an integer or float
>>> add_integer(3, "woza")
    Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "<doctest 0-add_integer.txt[5]>", line 1, in <module>
        add_integer(3, "woza")
      File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 27, in add_integer
        raise TypeError("b must be an integer")
    TypeError: b must be an integer

# Case where both a and b are not integers or floats
>>> add_integer("woza", "wozi")
    Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "<doctest 0-add_integer.txt[6]>", line 1, in <module>
        add_integer("woza", "wozi")
      File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 25, in add_integer
        raise TypeError("a must be an integer")
    TypeError: a must be an integer

# Case where one is a negative number
>>> add_integer(-3, 4)
1

# Case where a is a boolean
>>> add_integer(True, 3)
    Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "<doctest 0-add_integer.txt[8]>", line 1, in <module>
        add_integer(True, 3)
      File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 20, in add_integer
        raise TypeError("a must be an integer")
    TypeError: a must be an integer

# Case where b is a boolean
>>> add_integer(3, False)
    Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "<doctest 0-add_integer.txt[9]>", line 1, in <module>
        add_integer(3, False)
      File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 22, in add_integer
        raise TypeError("b must be an integer")
    TypeError: b must be an integer

# Case where a is None
>>> add_integer(None, 6)
    Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "<doctest 0-add_integer.txt[10]>", line 1, in <module>
        add_integer(None, 6)
      File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 15, in add_integer
        raise TypeError("a must be an integer")
    TypeError: a must be an integer

# Case where b is None
>>> add_integer(5, None)
    Traceback (most recent call last):
      File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        exec(compile(example.source, filename, "single",
      File "<doctest 0-add_integer.txt[11]>", line 1, in <module>
        add_integer(5, None)
      File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 17, in add_integer
        raise TypeError("b must be an integer")
    TypeError: b must be an integer

"""
